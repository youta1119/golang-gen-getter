package main

import (
	"flag"
	"fmt"
	"github.com/youta1119/golang-gen-getter/internal"
	"go/format"
	"golang.org/x/tools/imports"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
)

var (
	typeName = flag.String("type", "", "[required] struct type name")
)

func main() {
	log.SetFlags(0)
	log.SetPrefix("golang-gen-getter: ")
	flag.Parse()
	if len(*typeName) == 0 {
		flag.Usage()
		os.Exit(2)
	}
	// We accept either one directory or a list of files. Which do we have?
	args := flag.Args()
	if len(args) == 0 {
		// Default: process whole package in current directory.
		args = []string{"."}
	}

	// Parse the package once.
	var dir string
	if len(args) == 1 && isDirectory(args[0]) {
		dir = args[0]
	} else {
		dir = filepath.Dir(args[0])
	}
	outputName := filepath.Join(dir, strings.ToLower(fmt.Sprintf("%s_getter_gen.go", *typeName)))
	src, err := internal.GenerateGetter(*typeName, args)
	if err != nil {
		log.Fatalf("[error]failed to getenete getter: %v", err)
	}

	src, err = imports.Process(outputName, src, nil)
	if err != nil {
		log.Fatalf("[error]failed to resolve import: %v", err)
	}

	fileHeader := "// Code generated by golang-gen-getter. DO NOT EDIT.\n"
	src, err = format.Source(src)
	if err != nil {
		log.Fatalf("[error]failed to fotmat code: %v", err)
	}

	src = append([]byte(fileHeader), src...)
	err = ioutil.WriteFile(outputName, src, 0644)
	if err != nil {
		log.Fatalf("[error]failed to output generated code: %v", err)
	}
}

// isDirectory reports whether the named file is a directory.
func isDirectory(name string) bool {
	info, err := os.Stat(name)
	if err != nil {
		log.Fatal(err)
	}
	return info.IsDir()
}
